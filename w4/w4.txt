Script started on Tue 13 Oct 2015 09:49:49 PM EDT
rlemedemoraes@matrix:~/OOP345/w4> whoami
rlemedemoraes
rlemedemoraes@matrix:~/OOP345/w4> cat w4.cpp KVList.h
// Workshop 4 - Templates
// w4.cpp

#include <iostream>
#include <iomanip>
#include <string>
#include "KVList.h"

template <typename K, typename V, int N>
void display(const std::string& msg, const KVList<K, V, N>& list, int w) { 
    std::cout << msg;
    for (int i = 0; i < list.size(); i++)
        std::cout << std::setw(w) << list.key(i)
         << " : " << list.value(i) << std::endl;
}

int main(int argc, char** argv) {
    if (argc != 1) {
        std::cerr << argv[0] << ": too many arguments\n";
        return 1;
    }

    int width;
    bool keepreading;
    std::cout << std::fixed << std::setprecision(2);

    std::cout << "\nInventory\n=========\n";
    KVList <std::string, double, 5> inventory;
    std::string str;
    double price;

    keepreading = true;
    do {
         std::cout << "Product : ";
         getline(std::cin, str);
         if (str.compare("quit") == 0) {
             keepreading = false;
         } else {
             std::cout << "Price : ";
             std::cin >> price;
             std::cin.ignore();
             inventory.add(str, price);
         }
    } while(keepreading);
    display("\nPrice List\n----------\n", inventory, 13);

    std::cout << "\nCorrections\n-----------\n";
    keepreading = true;
    do {
         std::cout << "Product : ";
         getline(std::cin, str);
         if (str.compare("quit") == 0) {
             keepreading = false;
         } else {
             int i = inventory.find(str);
             if (i != -1) {
                 std::cout << "Price : ";
                 std::cin >> price;
                 std::cin.ignore();
                 inventory.replace(i, str, price);
             }
         }
    } while(keepreading);
    display("\nPrice List\n----------\n", inventory, 13);

    std::cout << "\nGlossary\n========\n";
    KVList <std::string, std::string, 5> glossary;
    std::string key, definition;

    keepreading = true;
    do {
         std::cout << "Key : ";
         getline(std::cin, key);
         if (key.compare("quit") == 0) {
             keepreading = false;
         } else {
             std::cout << "Definition : ";
             getline(std::cin, definition);
             glossary.add(key, definition);
         }
    } while(keepreading);
    display("\nEntries\n-------\n", glossary, 5);
}#ifndef OOP344_W4_KVLIST
#define OOP344_W4_KVLIST

#include <vector>

template <typename K, typename V, int N>
class KVList {
  static const int _maxSize = N;
  std::vector<K> _keys;
  std::vector<V> _values;
public:
  // default constructor - adopts a safe empty state
  KVList() {
    _keys.clear();
    _values.clear();
  }
  // returns the number of entires in the key-value list
  size_t size() const {
    return _keys.size();
  }
  // returns an unmodifiable reference to the key of element i in the list
  const K& key(int i) const {
    return _keys.at(i);
  }
  // returns an unmodifiable reference to the value of element i in the list
  const V& value(int i) const {
    return _values.at(i);
  }
  // adds a new element to the list if room exists and returns a reference to the current object, does nothing if no room exists
  KVList& add(const K& k, const V& v) {
    if(size() < _maxSize) {
      _keys.push_back(k);
      _values.push_back(v);
    }
    return *this;
  }
  // returns the index of the first element in the list with a key equal to k - defaults to 0
  int find(const K& k) const {
    int index = 0;
    for(auto it = _keys.begin(); it != _keys.end(); ++it, ++index) {
      if((*it) == k) {
        return index;
      }
    }
    return -1;
  }
  // replaces element i in the list with the key and value received and returns a reference to the current object
  KVList& replace(int i, const K& k, const V& v) {
    _keys.at(i) = k;
    _values.at(i) = v;
    return *this;
  }
};

#endif
rlemedemoraes@matrix:~/OOP345/w4> g++ -o w4 -std=c++0x w4.cpp
rlemedemoraes@matrix:~/OOP345/w4> ./w4

Inventory
=========
Product : Pizza
Price : 4.49
Product : Pierogi
Price : 2.4 56
Product : Potato Chips
Price : 2.29
Product : Black Tea
Price : 4.49
Product : Green Tea
Price : 3.46
Product : Fruit Tea
Price : 2.29
Product : quit

Price List
----------
        Pizza : 4.49
      Pierogi : 2.56
 Potato Chips : 2.29
    Black Tea : 4.49
    Green Tea : 3.46

Corrections
-----------
Product : Black Tea
Price : 5.29
Product : quit

Price List
----------
        Pizza : 4.49
      Pierogi : 2.56
 Potato Chips : 2.29
    Black Tea : 5.29
    Green Tea : 3.46

Glossary
========
Key : CPU
Definition : central processing unit
Key : ALU
Definition : arithmeticlo   c logic unit
Key : quit

Entries
-------
  CPU : central processing unit
  ALU : arithmetic logic unit
rlemedemoraes@matrix:~/OOP345/w4> exit
exit

Script done on Tue 13 Oct 2015 09:52:02 PM EDT
